diff --git a/native/jni/init/rootdir.cpp b/native/jni/init/rootdir.cpp
index d7b2f90bb..43da3d0ea 100644
--- a/native/jni/init/rootdir.cpp
+++ b/native/jni/init/rootdir.cpp
@@ -50,6 +50,37 @@ static void patch_init_rc(const char *src, const char *dest, const char *tmp_dir
     }
     rc_list.clear();
 
+    if (access("/vendor/build.prop", F_OK) == 0) {
+
+        xmkdirs(dirname(ROOTOVL "/vendor/build.prop"), 0755);
+        FILE *tmp = xfopen(ROOTOVL "/vendor/build.prop", "we");
+        if (!tmp) {
+            fprintf(rc, "\tsetprop ro.patch_status failed\n");
+        } else {
+            file_readline("/vendor/build.prop", [=](string_view line) -> bool {
+                if (str_starts(line, "ro.zygote=zygote64")) {
+                    fprintf(tmp, "ro.zygote=zygote64_32\n");
+                    return true;
+                }
+
+                if (str_starts(line, "ro.vendor.product.cpu.abilist=arm64-v8a")) {
+                    fprintf(tmp, "ro.vendor.product.cpu.abilist=arm64-v8a,armeabi-v7a,armeabi\n");
+                    return true;
+                }
+
+                if (str_starts(line, "ro.vendor.product.cpu.abilist32=")) {
+                    fprintf(tmp, "ro.vendor.product.cpu.abilist32=armeabi-v7a,armeabi\n");
+                    return true;
+                }
+
+                fprintf(tmp, "%s", line.data());
+                return true;
+            });
+            fclose(tmp);
+            clone_attr("/vendor/build.prop", ROOTOVL "/vendor/build.prop");
+        }
+    }
+
     // Inject Magisk rc scripts
     char pfd_svc[16], ls_svc[16];
     gen_rand_str(pfd_svc, sizeof(pfd_svc));
